# Generated by Django 5.1.2 on 2025-01-03 13:03

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import yumelinkapp.utils.type_enums.chatrequest_actions
import yumelinkapp.utils.type_enums.chatrequest_status
import yumelinkapp.utils.type_enums.filter_type
import yumelinkapp.utils.type_enums.like_type
import yumelinkapp.utils.type_enums.share_type
import yumelinkapp.utils.utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('can_delete_chatroom', models.BooleanField(default=False)),
                ('can_change_chatroom_name', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_name', models.CharField(default='Untitled', max_length=100)),
                ('profile', models.ImageField(blank=True, null=True, upload_to=yumelinkapp.utils.utils.chatroom_profile_path)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='', max_length=5000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('filter_content', models.CharField(choices=[('none', 'None'), ('mature', 'Mature'), ('violent', 'Violent'), ('nudity', 'Nudity'), ('suggestive', 'Sexually Suggestive Themes'), ('drug', 'Substance abuse')], default=yumelinkapp.utils.type_enums.filter_type.FilterType['none'], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('content', models.TextField(max_length=5000)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(blank=True, default='Untitled', max_length=100, null=True)),
                ('birthday', models.DateField()),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('profile', models.ImageField(blank=True, null=True, upload_to=yumelinkapp.utils.utils.user_profile_path)),
                ('header', models.ImageField(blank=True, null=True, upload_to=yumelinkapp.utils.utils.user_profile_path)),
                ('color', models.CharField(default='#000000', help_text='Enter a color code in the format #RRGGBB.', max_length=7, validators=[django.core.validators.RegexValidator(message='Color must be in the format #RRGGBB (e.g., #FFFFFF for white).', regex='^#([A-Fa-f0-9]{6})$')])),
                ('language', models.CharField(choices=[('ab', 'Abkhazian'), ('aa', 'Afar'), ('af', 'Afrikaans'), ('ak', 'Akan'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('hy', 'Armenian'), ('as', 'Assamese'), ('ay', 'Aymara'), ('az', 'Azerbaijani'), ('ba', 'Bashkir'), ('eu', 'Basque'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('bh', 'Bihari'), ('bi', 'Bislama'), ('bs', 'Bosnian'), ('br', 'Breton'), ('bug', 'Buginese'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('ca', 'Catalan'), ('ceb', 'Cebuano'), ('chr', 'Cherokee'), ('zh', 'Chinese_Simplified'), ('zh-Hant', 'Chinese_Traditional'), ('co', 'Corsican'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('dv', 'Dhivehi'), ('nl', 'Dutch'), ('dz', 'Dzongkha'), ('egy', 'Egyptian'), ('en', 'English'), ('eo', 'Esperanto'), ('et', 'Estonian'), ('fo', 'Faroese'), ('fj', 'Fijian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('gl', 'Galician'), ('lg', 'Ganda'), ('ka', 'Georgian'), ('de', 'German'), ('got', 'Gothic'), ('el', 'Greek'), ('kl', 'Greenlandic'), ('gn', 'Guarani'), ('gu', 'Gujarati'), ('ht', 'Haitian_Creole'), ('ha', 'Hausa'), ('haw', 'Hawaiian'), ('iw', 'Hebrew'), ('hi', 'Hindi'), ('hmn', 'Hmong'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('ig', 'Igbo'), ('id', 'Indonesian'), ('ia', 'Interlingua'), ('ie', 'Interlingue'), ('iu', 'Inuktitut'), ('ik', 'Inupiak'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jw', 'Javanese'), ('kn', 'Kannada'), ('ks', 'Kashmiri'), ('kk', 'Kazakh'), ('kha', 'Khasi'), ('km', 'Khmer'), ('rw', 'Kinyarwanda'), ('tlh', 'Klingon'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('ky', 'Kyrgyz'), ('lo', 'Laothian'), ('la', 'Latin'), ('lv', 'Latvian'), ('lif', 'Limbu'), ('ln', 'Lingala'), ('lt', 'Lithuanian'), ('lb', 'Luxembourgish'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mt', 'Maltese'), ('gv', 'Manx'), ('mi', 'Maori'), ('mr', 'Marathi'), ('mfe', 'Mauritian_Creole'), ('mn', 'Mongolian'), ('na', 'Nauru'), ('nr', 'Ndebele'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('ny', 'Nyanja'), ('oc', 'Occitan'), ('or', 'Oriya'), ('om', 'Oromo'), ('ps', 'Pashto'), ('nso', 'Pedi'), ('fa', 'Persian'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('qu', 'Quechua'), ('rm', 'Rhaeto_Romance'), ('ro', 'Romanian'), ('rn', 'Rundi'), ('ru', 'Russian'), ('sm', 'Samoan'), ('sg', 'Sango'), ('sa', 'Sanskrit'), ('sco', 'Scots'), ('gd', 'Scots_Gaelic'), ('sr', 'Serbian'), ('crs', 'Seselwa'), ('st', 'Sesotho'), ('sn', 'Shona'), ('sd', 'Sindhi'), ('si', 'Sinhalese'), ('ss', 'Siswant'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('su', 'Sundanese'), ('sw', 'Swahili'), ('sv', 'Swedish'), ('syr', 'Syriac'), ('tl', 'Tagalog'), ('tg', 'Tajik'), ('ta', 'Tamil'), ('tt', 'Tatar'), ('te', 'Telugu'), ('th', 'Thai'), ('bo', 'Tibetan'), ('ti', 'Tigrinya'), ('to', 'Tonga'), ('ts', 'Tsonga'), ('tn', 'Tswana'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('ug', 'Uighur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('ve', 'Venda'), ('vi', 'Vietnamese'), ('vo', 'Volapuk'), ('war', 'Waray_Philippines'), ('cy', 'Welsh'), ('wo', 'Wolof'), ('xh', 'Xhosa'), ('yi', 'Yiddish'), ('yo', 'Yoruba'), ('za', 'Zhuang'), ('zu', 'Zulu')], default='en', max_length=100)),
                ('filter_content', models.CharField(choices=[('none', 'None'), ('mature', 'Mature')], default=yumelinkapp.utils.type_enums.filter_type.FilterType['none'], max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=yumelinkapp.utils.utils.post_image_upload_path)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.post')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('share_type', models.CharField(choices=[('reblog', 'Reblog'), ('other', 'Other')], default=yumelinkapp.utils.type_enums.share_type.ShareType['reblog'], max_length=100)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj_id', models.PositiveIntegerField()),
                ('content', models.TextField(default='', max_length=5000)),
                ('is_justified', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_type', to='yumelinkapp.reporttype')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporter', to='yumelinkapp.user')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('is_read', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=5000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('like', 'Like'), ('love', 'Love')], default=yumelinkapp.utils.type_enums.like_type.LikeType['like'], max_length=100)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify', models.BooleanField(default=False)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='yumelinkapp.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='ChatRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('invite', 'Invite'), ('kick', 'Kick'), ('ban', 'Ban')], default=yumelinkapp.utils.type_enums.chatrequest_actions.ChatRequestActions['invite'], max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default=yumelinkapp.utils.type_enums.chatrequest_status.ChatRequestStatus['pending'], max_length=100)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatrequest_chatroom', to='yumelinkapp.chatroom')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatrequest_receiver', to='yumelinkapp.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatrequest_sender', to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to='yumelinkapp.user')),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blockers', to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserDisinterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disinterests', to='yumelinkapp.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disinterest_users', to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to='yumelinkapp.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interest_users', to='yumelinkapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='ChatRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_roles', to='yumelinkapp.chatrank')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_roles', to='yumelinkapp.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_roles', to='yumelinkapp.user')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'chat'), name='unique_user_chat_role')],
            },
        ),
    ]
